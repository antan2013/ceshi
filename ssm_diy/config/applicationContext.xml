<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd">

<!--        配置spring创建容器时要扫描的包-->
<!--       第一种： 扫描全部，剔除Controller -->
<!--        <context:component-scan base-package="cn.dksy">-->
<!--            &lt;!&ndash;制定扫包规则，不扫描 @Controller注解的JAVA类(由MVC管理)，其他的还是要扫描 &ndash;&gt;-->
<!--            <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>-->
<!--        </context:component-scan>-->
<!--    第二种：只扫描service，dao已经在下面整合mybatis时扫描-->
    <context:component-scan base-package="cn.dksy.service"/>


<!--       整合Spring和MyBatis-->
<!--   第一步： Spring接管MyBatis的Session工厂:
           1、加载配置文件
           2 配置数据源 和
           3、配置MyBatis的Session工厂
                属性1：数据库连接池
                属性2：加载mybatis的全局配置文件：SqlMapConfig.xml：
                    注意： 由于我们使用的是代理Dao的模式，Dao具体实现类由MyBatis使用代理方式创建，所以此时mybatis配置文件不能删。
                    当我们整合spring和mybatis时，mybatis创建的Mapper.xml文件名必须和Dao接口文件名一致
           -->
<!--    1、加载配置文件-->
    <context:property-placeholder location="classpath*:db.properties"></context:property-placeholder>
<!--    2 配置数据源 和数据库连接池-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${driver}"></property>
        <property name="url" value="${url}"></property>
        <property name="username" value="${name}"></property>
        <property name="password" value="${password}"></property>
    </bean>
<!--    3、配置MyBatis的Session工厂-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"></property>
<!--        <property name="configLocation" value="classpath:SqlMapConfig.xml"></property>-->
    </bean>




<!--    第二步： 配置自动扫描所有Mapper接口和文件-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="cn.dksy.dao"/>
     </bean>

<!--    第三步：配置spring的事务
        1、配置事务管理器
        2、配置事务通知
        3、配置aop
            3.1 配置切入点表达式
            3.2 建立通知和切入点表达式的关系
        -->

<!--    多个方法要写很多，且方法名要规范-->
<!--    <tx:advice id="txadvice" transaction-manager="transactionManager">-->
<!--        <tx:attributes>-->
<!--            <tx:method name="*" propagation="REQUIRED" read-only="false"/>-->
<!--            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->

<!--    <aop:config>-->
<!--        <aop:pointcut id="pt1" expression="execution(* cn.dksy.service.impl.*.*(..))"/>-->
<!--        <aop:advisor advice-ref="txadvice" pointcut-ref="pt1"/>-->
<!--    </aop:config>-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>
    <!--    可使用注解完成-->
    <tx:annotation-driven transaction-manager="transactionManager"/>

</beans>
